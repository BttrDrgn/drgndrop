@inherits LayoutComponentBase
@using drgndrop.Services;

@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject UserService UserService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">

        <a class="navbar-brand" href="">@Program.AppName</a>

        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="home" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="upload" Match="NavLinkMatch.All">
                <span class="oi oi-cloud-upload" aria-hidden="true"></span> Upload
            </NavLink>
        </div>

        @if (!UserService.LoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login" Match="NavLinkMatch.All">
                <span class="oi oi-account-login" aria-hidden="true"></span> Login
            </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="register" Match="NavLinkMatch.All">
                    <span class="oi oi-person" aria-hidden="true"></span> Register
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="myfiles" Match="NavLinkMatch.All">
                    <span class="oi oi-folder" aria-hidden="true"></span> My Files
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool Collapse = true;

    private string NavMenuCssClass => Collapse ? "collapse" : null;

    private void ToggleNavMenu()
    {
        Collapse = !Collapse;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (UserService.LoggedIn)
            {
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
