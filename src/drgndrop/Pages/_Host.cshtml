@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace drgndrop.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="drgndrop.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>

    <component type="typeof(HeadOutlet)" render-mode="Server" />
</head>
<body>
    <component type="typeof(App)" render-mode="Server" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script>
        window.cookies = {
            write: (key, value, days) =>
            {
                var expires;
                if (days)
                {
                    var date = new Date();
                    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                    expires = "; expires=" + date.toGMTString();
                }
                else
                {
                    expires = "";
                }
                document.cookie = key + "=" + value + expires + "; path=/";
                console.log(document.cookie);
            },
            read: () =>
            {
                return document.cookie;
            }
        }

        window.localStore = {
            write: (key, value) =>
            {
                localStorage.setItem(key, value);
            },
            read: (key) =>
            {
                return localStorage.getItem(key);
            },
            delete: (key) =>
            {
                localStorage.removeItem(key);
            },
            clear: () =>
            {
                localStorage.clear();
            }
        }
    </script>
</body>
</html>