@page "/files/{FileID}"
@using drgndrop;
@using Crypt = BCrypt.Net.BCrypt;
@inject IWebHostEnvironment Environment
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject IHttpContextAccessor CtxAccessor;

<HeadContent>
    <meta name="og:title" content="@(Program.AppName) - @(DlFile != null ? PasswordCheck ? DlFile.Name : FileID : FileID)" />
    <meta name="og:url" content="@($"{Program.Http}://{Program.DomainName}/files/{FileID}?key={Key}"))" />
    <meta name="og:description" content="@Description" />
    <meta name="theme-color" content="@(PasswordCheck ? "#0A60B0" : "#10357E" )" />
</HeadContent>

<div class="container-fluid">
@if (FileExists)
{
    @if (!PasswordCheck)
    {
        <PageTitle>Files - @FileID</PageTitle>

        <a>Password is incorrect!</a>
    }
    else
    {
        <PageTitle>Files - @DlFile.Name</PageTitle>

        <h1>@DlFile.Name</h1>

        switch (Utils.GetMediaType(Utils.GetMIMEType(DlFile.Name)))
        {
            case Utils.MediaType.Image:
                    <img class="img-fluid img-thumbnail" src="@DownloadLink" />
                break;

            case Utils.MediaType.Video:
                    <div class="ratio ratio-16x9">
                        <iframe src="@DownloadLink" allowfullscreen></iframe>
                    </div>
                break;

            case Utils.MediaType.Audio:
                <audio controls>
                    <source src="@DownloadLink" type="@Utils.GetMIMEType(DlFile.Name)">
                    Your browser does not support the audio element.
                </audio>
            break;

            default:
                break;
        }

        <ul>
            <li>Creation: <code>@Utils.ParseEpoch(DlFile.Creation)</code></li>
            <li>Size: <code>@Utils.ParseBytes(DlFile.Size)</code></li>
        </ul>

        <span class="d-inline-block" tabindex="0" data-toggle="tooltip" title="@Utils.GetMIMEType(DlFile.Name)">
                <a class="btn btn-secondary" href="@DownloadLink" target="_blank">Download</a>
        </span>
    }
}
else
{
    <PageTitle>Files - Not Found</PageTitle>
    <p><code>@FileID</code> not found!</p>
}
</div>

@code {
    [Parameter] public string FileID { get; set; }
    public string DownloadLink = "";
    public DrgnfileInfo? DlFile = null;
    public bool FileExists = true;
    public bool PasswordCheck = false;
    public string Key = "";
    public string Description = "";

    protected override void OnInitialized()
    {
        string filePath = Path.Combine(Program.UploadPath, FileID);
        if (FileExists = Directory.Exists(filePath))
        {
            DlFile = Drgnfile.Load(filePath);
            if (DlFile != null)
            {
                var splitUrl = NavManager.Uri.Split('?');
                Key = splitUrl.Length > 1 ? Utils.GetQuery(in splitUrl[1], "key") : "";

                PasswordCheck = DlFile.IsEncrypted ? Crypt.EnhancedVerify(Key, DlFile.PasswordHash) : true;

                DownloadLink = $"{Program.Http}://{Program.DomainName}/dl/{FileID}";
                if (Key != "") DownloadLink += $"?key={Key}";
            }
            else FileExists = false;
        }

        if(PasswordCheck)
        {
            Description = $"Created: {Utils.ParseEpoch(DlFile.Creation)}\nSize: {Utils.ParseBytes(DlFile.Size)}";
        }
        else
        {
            Description = "FOSS privacy focused file sharing platform";
        }
        

        base.OnInitialized();
    }
}