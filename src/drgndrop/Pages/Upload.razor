@page "/upload"
@using drgndrop;
@using SevenZip;
@inject IWebHostEnvironment Environment
@inject NavigationManager NavManager
@inject IClipboardService ClipboardService
@inject IJSRuntime JS

<PageTitle>Upload</PageTitle>

<div class="container-fluid">
    @if(!Finished)
    {
        @if (!Uploading)
        {
            <form>
                <div class="form-group">
                    <InputFile OnChange="@UploadFiles" />
                </div>
                <div class="form-group form-check">
                    <input class="form-check-input" type="checkbox" id="encrypt" @bind="@Encrypted" />
                    <label class="form-check-label" for="encrypt">Encrypt</label>
                </div>
            </form>
        }
        else
        {
            <LoadingTemplate>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Uploading...
            </LoadingTemplate>

            <div class="new-line"></div>
            <p>@(Utils.BytesToMB(UploadedBytes, 2))MB / @(Utils.BytesToMB(DroppedFile.Size, 2))MB</p>
        }
    }

    @if (Errored)
    {
        <p>Error: @ErrorMsg</p>
    }

    @if(Finished)
    {
        @if (!Errored)
        {
            @if(AutoCopied){ <p>Link automatically copied to clipboard</p> }
        }

        @if(!Uploading)
        {
            <input type="text" id="link" @bind="@LinkToFile" size="64" readonly />
            <div class="new-line"></div>
            <button onclick="@ResetState">Upload Another</button>
        }
    }
</div>


@code
{
    public string ErrorMsg = "";
    public bool Errored => ErrorMsg != "";
    public bool Uploading = false;
    private bool Encrypted = true;
    private int UploadedBytes = 0;
    private string LinkToFile = "";
    private bool AutoCopied = false;
    public bool Finished = false;
    public IBrowserFile DroppedFile = null;

    public string FileID = "";
    public string FileExt => Utils.GetExtension(DroppedFile.Name);
    public string Password = "";
    public string FilePath => Path.Combine(Program.UploadPath, FileID);
    public Timer Timer = null;

    public void ResetState()
    {
        AutoCopied = false;
        ErrorMsg = "";
        Uploading = false;
        Finished = false;
        UploadedBytes = 0;

        DroppedFile = null;

        Password = "";
    }

    async Task UploadFiles(InputFileChangeEventArgs e)
    {
        ResetState();

        var files = e.GetMultipleFiles();

        if(files.Count > 1)
        {
            ErrorMsg = $"Currently only one file per upload is allowed!";
            Uploading = false;
            return;
        }

        DroppedFile = files[0];

        await using var Timer = new Timer(_ => InvokeAsync(() => StateHasChanged()));
        Timer.Change(TimeSpan.FromMilliseconds(1000), TimeSpan.FromMilliseconds(1000));

        var drgnfile = GenerateNewFile();
        await ProcessFile(drgnfile);
        CopyToClipboard();

        Timer.Dispose();
        Uploading = false;
        Finished = true;
    }

    public Drgnfile GenerateNewFile()
    {
        FileID = Utils.GenID();
        if (Encrypted) Password = Utils.GenPass();

        return new Drgnfile(DroppedFile.Name, Password);
    }

    public async Task ProcessFile(Drgnfile drgnfile)
    {
        Uploading = true;

        Stream rs = null;
        var us = new MemoryStream();
        var cs = new MemoryStream();
        var compressor = new SevenZipCompressor();

        try
        {
            if (DroppedFile.Size >= Program.MaxFileSize)
            {
                ErrorMsg = $"One or more file sizes are too big ({DroppedFile.Name})! The size limit is {Utils.BytesToMB(Program.MaxFileSize)} MB per file.";
                throw new InvalidOperationException(ErrorMsg);
            }

            rs = DroppedFile.OpenReadStream(Program.MaxFileSize);

            byte[] buffer = new byte[rs.Length];
            while (await rs.ReadAsync(buffer, 0, (int)rs.Length) is int read && read > 0)
            {
                UploadedBytes += read;
                await us.WriteAsync(buffer, 0, read);
            }

            if (Encrypted) await compressor.CompressStreamAsync(us, cs, Password);
            else await compressor.CompressStreamAsync(us, cs);
        }
        catch (Exception ex)
        {
            cs?.Dispose();
            us?.Dispose();
            rs?.Dispose();

            ErrorMsg = ex.Message;

            if (File.Exists(FilePath)) File.Delete(FilePath);

            Uploading = false;
            Finished = true;
        }
        finally
        {
            await drgnfile.Save(FilePath, cs);

            us?.Dispose();
            rs?.Dispose();
            cs?.Dispose();
        }
    }

    public async void CopyToClipboard()
    {
        if (Encrypted) LinkToFile = Utils.GenLink($"files/{FileID}?key={Password}");
        else LinkToFile = Utils.GenLink($"files/{FileID}");

        if (await JS.InvokeAsync<bool>("document.hasFocus"))
        {
            try
            {
                await ClipboardService.CopyToClipboard(LinkToFile);
                AutoCopied = true;
            }
            catch (Exception ex)
            {
                ErrorMsg = "Access denied to clipboard! Must manually copy.";
                AutoCopied = false;
            }
        }
        else
        {
            AutoCopied = false;
        }
    }
}